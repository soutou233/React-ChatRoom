{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    addNotifications: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n\n      if (state.newMessages[payload]) {\n        state.newMessages[payload] = state.newMessages[payload] + 1;\n      }\n    },\n    resetNotifications: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n    }\n  },\n  extraReducers: builder => {\n    // save user after signup\n    builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return payload;\n    }); // save user after login\n\n    builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return payload;\n    }); // logout and destory user session\n\n    builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n  }\n});\nexport const {\n  addNotifications,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","appApi","userSlice","name","initialState","reducers","addNotifications","state","payload","newMessages","resetNotifications","extraReducers","builder","addMatcher","endpoints","signupUser","matchFulfilled","loginUser","logoutUser","actions","reducer"],"sources":["/Users/jeremy/Documents/GithubProjects/React-ChatRoom/chatroom-frontend/src/features/userSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    addNotifications: (state, { payload }) => {\n      if (state.newMessages[payload]) {\n        state.newMessages[payload] = state.newMessages[payload] + 1;\n      }\n    },\n    resetNotifications: (state, { payload }) => {},\n  },\n  extraReducers: (builder) => {\n    // save user after signup\n    builder.addMatcher(\n      appApi.endpoints.signupUser.matchFulfilled,\n      (state, { payload }) => payload\n    );\n    // save user after login\n    builder.addMatcher(\n      appApi.endpoints.loginUser.matchFulfilled,\n      (state, { payload }) => payload\n    );\n    // logout and destory user session\n    builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n  },\n});\n\nexport const { addNotifications, resetNotifications } = userSlice.actions;\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACnCG,IAAI,EAAE,MAD6B;EAEnCC,YAAY,EAAE,IAFqB;EAGnCC,QAAQ,EAAE;IACRC,gBAAgB,EAAE,CAACC,KAAD,WAAwB;MAAA,IAAhB;QAAEC;MAAF,CAAgB;;MACxC,IAAID,KAAK,CAACE,WAAN,CAAkBD,OAAlB,CAAJ,EAAgC;QAC9BD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,IAA6BD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,IAA6B,CAA1D;MACD;IACF,CALO;IAMRE,kBAAkB,EAAE,CAACH,KAAD,YAAwB;MAAA,IAAhB;QAAEC;MAAF,CAAgB;IAAE;EANtC,CAHyB;EAWnCG,aAAa,EAAGC,OAAD,IAAa;IAC1B;IACAA,OAAO,CAACC,UAAR,CACEZ,MAAM,CAACa,SAAP,CAAiBC,UAAjB,CAA4BC,cAD9B,EAEE,CAACT,KAAD;MAAA,IAAQ;QAAEC;MAAF,CAAR;MAAA,OAAwBA,OAAxB;IAAA,CAFF,EAF0B,CAM1B;;IACAI,OAAO,CAACC,UAAR,CACEZ,MAAM,CAACa,SAAP,CAAiBG,SAAjB,CAA2BD,cAD7B,EAEE,CAACT,KAAD;MAAA,IAAQ;QAAEC;MAAF,CAAR;MAAA,OAAwBA,OAAxB;IAAA,CAFF,EAP0B,CAW1B;;IACAI,OAAO,CAACC,UAAR,CAAmBZ,MAAM,CAACa,SAAP,CAAiBI,UAAjB,CAA4BF,cAA/C,EAA+D,MAAM,IAArE;EACD;AAxBkC,CAAD,CAA7B;AA2BP,OAAO,MAAM;EAAEV,gBAAF;EAAoBI;AAApB,IAA2CR,SAAS,CAACiB,OAA3D;AACP,eAAejB,SAAS,CAACkB,OAAzB"},"metadata":{},"sourceType":"module"}