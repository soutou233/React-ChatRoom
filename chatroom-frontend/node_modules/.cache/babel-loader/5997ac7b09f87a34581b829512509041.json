{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: null,\n  reducers: {\n    addNotifications: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n\n      if (state.newMessages[payload]) {\n        state.newMessages[payload] = state.newMessages[payload] + 1;\n      } else {\n        state.newMessages[payload] = 1;\n      }\n    },\n    resetNotifications: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      delete state.newMessages[payload];\n    }\n  },\n  extraReducers: builder => {\n    // save user after signup\n    builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      return payload;\n    }); // save user after login\n\n    builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      return payload;\n    }); // logout: destroy user session\n\n    builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n  }\n});\nexport const {\n  addNotifications,\n  resetNotifications\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","appApi","userSlice","name","initialState","reducers","addNotifications","state","payload","newMessages","resetNotifications","extraReducers","builder","addMatcher","endpoints","signupUser","matchFulfilled","loginUser","logoutUser","actions","reducer"],"sources":["/Users/jeremy/Documents/GithubProjects/React-ChatRoom/chatroom-frontend/src/features/userSlice.js"],"sourcesContent":["\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport appApi from \"../services/appApi\";\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState: null,\n    reducers: {\n        addNotifications: (state, { payload }) => {\n            if (state.newMessages[payload]) {\n                state.newMessages[payload] = state.newMessages[payload] + 1;\n            } else {\n                state.newMessages[payload] = 1;\n            }\n        },\n        resetNotifications: (state, { payload }) => {\n            delete state.newMessages[payload];\n        },\n    },\n\n    extraReducers: (builder) => {\n        // save user after signup\n        builder.addMatcher(appApi.endpoints.signupUser.matchFulfilled, (state, { payload }) => payload);\n        // save user after login\n        builder.addMatcher(appApi.endpoints.loginUser.matchFulfilled, (state, { payload }) => payload);\n        // logout: destroy user session\n        builder.addMatcher(appApi.endpoints.logoutUser.matchFulfilled, () => null);\n    },\n});\n\nexport const { addNotifications, resetNotifications } = userSlice.actions;\nexport default userSlice.reducer;"],"mappings":"AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,OAAO,MAAMC,SAAS,GAAGF,WAAW,CAAC;EACjCG,IAAI,EAAE,MAD2B;EAEjCC,YAAY,EAAE,IAFmB;EAGjCC,QAAQ,EAAE;IACNC,gBAAgB,EAAE,CAACC,KAAD,WAAwB;MAAA,IAAhB;QAAEC;MAAF,CAAgB;;MACtC,IAAID,KAAK,CAACE,WAAN,CAAkBD,OAAlB,CAAJ,EAAgC;QAC5BD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,IAA6BD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,IAA6B,CAA1D;MACH,CAFD,MAEO;QACHD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,IAA6B,CAA7B;MACH;IACJ,CAPK;IAQNE,kBAAkB,EAAE,CAACH,KAAD,YAAwB;MAAA,IAAhB;QAAEC;MAAF,CAAgB;MACxC,OAAOD,KAAK,CAACE,WAAN,CAAkBD,OAAlB,CAAP;IACH;EAVK,CAHuB;EAgBjCG,aAAa,EAAGC,OAAD,IAAa;IACxB;IACAA,OAAO,CAACC,UAAR,CAAmBZ,MAAM,CAACa,SAAP,CAAiBC,UAAjB,CAA4BC,cAA/C,EAA+D,CAACT,KAAD;MAAA,IAAQ;QAAEC;MAAF,CAAR;MAAA,OAAwBA,OAAxB;IAAA,CAA/D,EAFwB,CAGxB;;IACAI,OAAO,CAACC,UAAR,CAAmBZ,MAAM,CAACa,SAAP,CAAiBG,SAAjB,CAA2BD,cAA9C,EAA8D,CAACT,KAAD;MAAA,IAAQ;QAAEC;MAAF,CAAR;MAAA,OAAwBA,OAAxB;IAAA,CAA9D,EAJwB,CAKxB;;IACAI,OAAO,CAACC,UAAR,CAAmBZ,MAAM,CAACa,SAAP,CAAiBI,UAAjB,CAA4BF,cAA/C,EAA+D,MAAM,IAArE;EACH;AAvBgC,CAAD,CAA7B;AA0BP,OAAO,MAAM;EAAEV,gBAAF;EAAoBI;AAApB,IAA2CR,SAAS,CAACiB,OAA3D;AACP,eAAejB,SAAS,CAACkB,OAAzB"},"metadata":{},"sourceType":"module"}